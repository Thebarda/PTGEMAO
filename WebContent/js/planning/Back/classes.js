// Generated by CoffeeScript 1.10.0
(function() {
  var SEPARATEUR,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  toastr.options = {
    "closeButton": true,
    "debug": false,
    "newestOnTop": false,
    "progressBar": true,
    "positionClass": "toast-top-right",
    "preventDuplicates": false,
    "onclick": null,
    "showDuration": "300",
    "hideDuration": "2000",
    "timeOut": "10000",
    "extendedTimeOut": "10000",
    "showEasing": "swing",
    "hideEasing": "linear",
    "showMethod": "fadeIn",
    "hideMethod": "fadeOut"
  };

  SEPARATEUR = " : ";


  /*
    fonctions utilisées par les classes (et exterieur)
   */

  window.parseHeure = (function(_this) {
    return function(chaine) {
      if (chaine === null) {
        return null;
      }
      return chaine.split(SEPARATEUR);
    };
  })(this);


  /*
    Fonction retournant la chaine représentant une heure
   */

  window.getChaineHeure = function(heure, minutes) {
    var chaine;
    if (heure < 10) {
      chaine = "0" + heure;
    } else {
      chaine = heure;
    }
    chaine = chaine + (SEPARATEUR + minutes);
    if (minutes === 0) {
      chaine = chaine + "0";
    }
    return chaine;
  };


  /*
  Classe en charge de la création du html pour le planning
   */

  window.PlanningHtmlCreator = (function() {
    function PlanningHtmlCreator(salles1, heureDebut, heureFin) {
      this.salles = salles1;
      this.heureDebut = heureDebut != null ? heureDebut : 8;
      this.heureFin = heureFin != null ? heureFin : 22;
      this.creerTableauJour = bind(this.creerTableauJour, this);
      this.creerLigneDroppable = bind(this.creerLigneDroppable, this);
      this.creerLigneSalle = bind(this.creerLigneSalle, this);
      this.nbLignes = (this.heureFin - this.heureDebut) * 4 - 1;
    }


    /*
      Fonction retournant la ligne représentant les salles du planning
     */

    PlanningHtmlCreator.prototype.creerLigneSalle = function() {
      var j, len, ligne, ref, salle, td;
      ligne = $(document.createElement("tr"));
      ligne.append($(document.createElement("th")));
      ref = this.salles;
      for (j = 0, len = ref.length; j < len; j++) {
        salle = ref[j];
        td = $(document.createElement("th"));
        td.text(salle);
        ligne.append(td);
      }
      return ligne;
    };


    /*
      creer une ligne avec en en-tete, l'heure passée en parametre
     */

    PlanningHtmlCreator.prototype.creerLigneDroppable = function(heure, minutes) {
      var i, j, ligne, ref, td;
      ligne = $(document.createElement("tr"));
      td = $(document.createElement("th"));
      td.text(window.getChaineHeure(heure, minutes));
      if (minutes === 0) {
        td.attr("rowspan", 4);
      } else {
        td.css("display", "none");
      }
      ligne.append(td);
      for (i = j = 0, ref = this.salles.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        td = $(document.createElement("td"));
        if (minutes === 0) {
          td.addClass("bordure-debut-heure");
        } else if (minutes === 45) {
          td.addClass("bordure-fin-heure");
        }
        ligne.append(td);
      }
      return ligne;
    };


    /*
      Fonction retournant un tableau crée avec les parametres du planning
      en ligne, les heures
      en colonne, les salles
     */

    PlanningHtmlCreator.prototype.creerTableauJour = function() {
      var heure, i, j, minutes, ref, tableau;
      tableau = $(document.createElement("table"));
      tableau.append(this.creerLigneSalle);
      for (i = j = 0, ref = this.nbLignes; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        heure = this.heureDebut + (Math.floor(i / 4));
        minutes = (i % 4) * 15;
        tableau.append(this.creerLigneDroppable(heure, minutes));
      }
      return tableau;
    };

    return PlanningHtmlCreator;

  })();

  window.Cours = (function() {
    function Cours(matiere, professeur) {
      this.matiere = matiere;
      this.professeur = professeur;
    }

    return Cours;

  })();

  window.Contrainte = (function() {
    function Contrainte(idCreneau, jour1, heureDeb, heureFin, salle1, message) {
      this.idCreneau = idCreneau;
      this.jour = jour1;
      this.heureDeb = heureDeb;
      this.heureFin = heureFin;
      this.salle = salle1;
      this.message = message != null ? message : null;
    }

    Contrainte.prototype.getEmplacementsConcernes = function() {
      var chaineJour, chaineSalle, deb, elems, fin, heure, heures, indexDeb, indexFin, indexSalle, j, jour, jours, k, len, len1, salle;
      chaineSalle = "td";
      chaineJour = "#edt table";
      indexDeb = 1;
      indexFin = $("#edt table:first-child").find("tr:last-child").index() + 1;
      if (this.salle !== null) {
        salle = this.salle;
        indexSalle = $("#edt table").find("tr:first-child").find("th").filter(function() {
          return $(this).text() === salle;
        }).index() - 1;
        chaineSalle = "td:eq(" + indexSalle + ")";
      }
      if (this.jour !== null) {
        chaineJour = "#edt #" + this.jour;
      }
      if (this.heureDeb !== null && this.heureFin !== null) {
        deb = this.heureDeb;
        fin = this.heureFin;
        indexDeb = $("table").children().find("th").filter(function() {
          return $(this).text() === deb;
        }).closest("tr").index();
        indexFin = $("table").children().find("th").filter(function() {
          return $(this).text() === fin;
        }).closest("tr").index();
      }
      jours = $(chaineJour);
      elems = new Array();
      for (j = 0, len = jours.length; j < len; j++) {
        jour = jours[j];
        heures = $(jour).find("tr").slice(indexDeb, indexFin);
        for (k = 0, len1 = heures.length; k < len1; k++) {
          heure = heures[k];
          elems.push($(heure).find(chaineSalle));
        }
      }
      return elems;
    };

    return Contrainte;

  })();


  /*
    Classe représentant un créneau destiné a etre placé sur un planning
   */

  window.Creneau = (function() {
    function Creneau(id, intitule, nbQuartDHeure, heureDeb, jour1, salle1, backgroundColor, cours, modifie, cree, contraintes) {
      this.id = id;
      this.intitule = intitule != null ? intitule : "Creneau";
      this.nbQuartDHeure = nbQuartDHeure != null ? nbQuartDHeure : 2;
      this.heureDeb = heureDeb != null ? heureDeb : null;
      this.jour = jour1 != null ? jour1 : null;
      this.salle = salle1 != null ? salle1 : null;
      this.backgroundColor = backgroundColor != null ? backgroundColor : "ffffff";
      this.cours = cours != null ? cours : null;
      this.modifie = modifie != null ? modifie : false;
      this.cree = cree != null ? cree : false;
      this.contraintes = contraintes != null ? contraintes : new Array();
      this.getHeureFin = bind(this.getHeureFin, this);
      this.doitEtrePlace = bind(this.doitEtrePlace, this);
    }


    /*
      Retourne vrai si le créneau est à placer.
     */

    Creneau.prototype.doitEtrePlace = function() {
      return this.heureDeb !== null && this.jour !== null && this.salle !== null && this.heureDeb !== void 0 && this.jour !== void 0 && this.salle !== void 0;
    };

    Creneau.prototype.getHeureFin = function() {
      var tab;
      tab = window.parseHeure(this.heureDeb);
      tab[0] = parseInt(tab[0]);
      tab[1] = parseInt(tab[1]);
      tab[1] = tab[1] / 15 + this.nbQuartDHeure;
      while (tab[1] >= 4) {
        tab[0] += 1;
        tab[1] -= 4;
      }
      tab[1] *= 15;
      return getChaineHeure(tab[0], tab[1]);
    };


    /*
      Methode mettant a jour le creneau selon l'element où il a été placé
      elem : l'element, un td ou li appartenant a la liste de créneaux a placer
     */

    Creneau.prototype.mettreAJour = function(elem) {
      var aHeureDeb, aJour, aSalle, indexElem, indexTr;
      aJour = this.jour;
      aHeureDeb = this.heureDeb;
      aSalle = this.salle;
      if ($(elem).prop("tagName") === "LI") {
        this.salle = null;
        this.jour = null;
        this.heureDeb = null;
      } else {
        indexTr = $(elem).closest("tr").index();
        indexElem = $(elem).index();
        this.jour = $(elem).closest("div").attr("id");
        this.heureDeb = $(elem).closest("table").find("tr:nth-child(" + (indexTr + 1) + ")").children().eq(0).text();
        this.salle = $(elem).closest("table").find("tr:first-child").find("th:nth-child(" + (indexElem + 1) + ")").text();
      }
      if (aJour !== this.jour || aHeureDeb !== this.heureDeb || aSalle !== this.salle) {
        return this.modifie = true;
      }
    };

    Creneau.prototype.highlightContraintes = function() {
      return console.log("highlight");
    };

    Creneau.prototype.hideContraintes = function() {
      return console.log("hide");
    };

    Creneau.prototype.getChaineInvalide = function() {
      return "invalide" + this.id;
    };

    return Creneau;

  })();


  /*
    Classe responsable de placer les classes html sur divers éléments
   */

  window.ClassPlacer = (function() {
    function ClassPlacer() {
      this.placerClassePlanning = bind(this.placerClassePlanning, this);
      this.placerClassesPureCss = bind(this.placerClassesPureCss, this);
      this.placerDropZones = bind(this.placerDropZones, this);
      this.placerClassesSalles = bind(this.placerClassesSalles, this);
    }

    ClassPlacer.prototype.placerClassesSalles = function(salles, tableau) {
      var i, j, ref, results;
      results = [];
      for (i = j = 0, ref = salles - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        results.push($(tableau).find("tr td:nth-child(" + i(+")")).addClass(salles[i]));
      }
      return results;
    };

    ClassPlacer.prototype.placerDropZones = function(tableau) {
      return $(tableau).find("tr td").addClass("dropZone slotCreneau");
    };

    ClassPlacer.prototype.placerClassesPureCss = function(tableau) {
      return $(tableau).addClass("pure-table pure-table-bordred");
    };

    ClassPlacer.prototype.placerClassePlanning = function() {
      return $("table").addClass("pure-planning");
    };

    return ClassPlacer;

  })();


  /*
    Manager du créneau : responsable de la gestion des créneaux
   */

  window.CreneauManager = (function() {
    function CreneauManager() {
      this.trouverEmplacementCreneau = bind(this.trouverEmplacementCreneau, this);
      this.placerCreneau = bind(this.placerCreneau, this);
      this.texteCreneauTooltip = bind(this.texteCreneauTooltip, this);
      this.ajouterTooltipCreneau = bind(this.ajouterTooltipCreneau, this);
      this.creerCreneauHtml = bind(this.creerCreneauHtml, this);
    }

    CreneauManager.prototype.creerCreneauHtml = function(creneau) {
      var elem;
      if (!creneau.doitEtrePlace()) {
        elem = $(document.createElement("li"));
      } else {
        elem = $(document.createElement("span"));
      }
      $(elem).addClass("creneau");
      $(elem).text(creneau.intitule);
      $(elem).css("background-color", "#" + creneau.backgroundColor);
      elem.data("creneau", creneau);
      return elem;
    };

    CreneauManager.prototype.ajouterTooltipCreneau = function(element, creneau) {
      var texte;
      texte = this.texteCreneauTooltip(creneau);
      $(element).attr("title", texte);
      $(element).tooltip({
        content: texte,
        position: {
          my: "left top",
          at: "right bottom"
        },
        show: {
          effect: "drop",
          delay: 100
        },
        hide: {
          effect: "drop",
          delay: 150
        }
      });
      return true;
    };

    CreneauManager.prototype.texteCreneauTooltip = function(creneau) {
      var chaineCours;
      if (creneau.cours === null) {
        chaineCours = "Cours: aucun";
      } else {
        chaineCours = "Cours : <br>&nbsp;&nbsp;Matière : " + creneau.cours.matiere + " <br>&nbsp;&nbsp;Professeur : " + creneau.cours.professeur;
      }
      return ("Intitule : " + creneau.intitule + " <br> Heure debut : " + creneau.heureDeb + "<br> Heure fin : ") + creneau.getHeureFin() + "<br>" + chaineCours;
    };


    /*
      Fonction placant un créneau sur le planning
     */

    CreneauManager.prototype.placerCreneau = function(creneau, enModification) {
      var crenHtml, td;
      if (enModification == null) {
        enModification = false;
      }
      crenHtml = this.creerCreneauHtml(creneau);
      if (creneau.doitEtrePlace()) {
        td = this.trouverEmplacementCreneau(creneau);
        return window.placerCoursSurDroppable(td, creneau.nbQuartDHeure, crenHtml, this, false);
      } else {
        if (enModification === false) {
          return this.signalerCreneauNonPlace(creneau);
        } else {
          return this.placerCreneauDansListe(crenHtml);
        }
      }
    };

    CreneauManager.prototype.signalerCreneauNonPlace = function(creneau) {
      return toastr.warning('Le créneau ' + creneau.intitule + ' n\'a pas été placé', 'Placement en attente');
    };


    /*
      Place le créneau dans la liste des créneaux "a placer"
     */

    CreneauManager.prototype.placerCreneauDansListe = function(li) {
      var creneau, liste;
      liste = $("#creneauxAPlacer");
      creneau = li.data("creneau");
      liste.append(li);
      window.makeDraggable(li);
      return creneau.mettreAJour(li);
    };


    /*
      Fonction placant l'ensemble des créneaux sur le planning
     */

    CreneauManager.prototype.placerCreneaux = function(creneaux, enModif) {
      var creneau, j, len;
      for (j = 0, len = creneaux.length; j < len; j++) {
        creneau = creneaux[j];
        this.placerContraintesCreneau(creneau);
        this.placerCreneau(creneau, enModif);
      }
      return true;
    };

    CreneauManager.prototype.placerContraintesCreneau = function(creneau) {
      var chaineInvalide, contrainte, elem, elems, j, k, len, len1, ref;
      chaineInvalide = creneau.getChaineInvalide();
      ref = creneau.contraintes;
      for (j = 0, len = ref.length; j < len; j++) {
        contrainte = ref[j];
        elems = contrainte.getEmplacementsConcernes();
        for (k = 0, len1 = elems.length; k < len1; k++) {
          elem = elems[k];
          $(elem).data(chaineInvalide, contrainte.message);
          console.log($(elem).data(chaineInvalide));
        }
        elems = [];
      }
      return true;
    };


    /*
        Fonction trouvant l'emplacement correspondant un creneau
        Pré-conditions :
          jour positionné
          heureDébut valide
          salle valide
     */

    CreneauManager.prototype.trouverEmplacementCreneau = function(creneau) {
      var elemHeure, indexColonne, table;
      table = $("#" + creneau.jour + " > table");
      elemHeure = $(table).children().find("th").filter(function() {
        return $(this).text() === creneau.heureDeb;
      });
      indexColonne = $(table).children().find("th").filter(function() {
        return $(this).text() === creneau.salle;
      }).index();
      return $(elemHeure).closest("tr").children().eq(indexColonne);
    };

    return CreneauManager;

  })();

}).call(this);
